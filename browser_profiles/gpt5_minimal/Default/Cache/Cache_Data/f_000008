/**
 * spro Common script
 * 	** common method list
 * 		- getWebAppPath()
 * 		- getContextRoot()
 * 		- getMainDomain()
 * 		- isOtherHost(url)
 * 		- setLoadTime(millisecond)
 * 		- getCurTime()
 * 
 * 		- escapeHTML(str)
 * 		- unescapeHTML(str)
 * 
 * 		- toDate(millisecond)
 * 		- toServerDate(millisecond)
 * 		- arrayToJSTreeData(list, topItem, isCreateId, isSimple)
 * 
 * 		- activeSubmenu(menuItem)
 * 
 * 		- axCover(container or plugin, isContentWrap or element)
 * 
 * 		- showModal(url[, argument], callback)
 * 		- showModalFrame(url[, argument], callback, options)
 * 		- getModalArgument()
 * 
 * 		- popupOpen(url, options, windowName)
 * 		- popupReturn(result)
 * 		- popupArgument()
 * 
 * 		- showEmailModal(callback, mailItem, options)
 *  	- openEmailPopup(callback, mailItem, options)
 * 
 * 		- showUserContextMenu(target, userId, direction)
 * 		- goProfilePopupMain(targetUserId)
 * 		- goFacilityPopupMain(facilityId[, facilityName])
 * 
 * 		- splitView(container, leftMenuContainer)
 * 		- destroySplitView(container, leftMenuContainer)
 * 
 * 		- referrerPopup(type,module,itemId,boardId)
 * 		- getUrlArguments(name)
 * 
 * 		- sendMailPop(nameList, emailList, title, content, fileIdList, fileNameList)
 * 
 * 		- fileUpload(callback, options)
 * 
 *		- sort(container, sortColumn, sortOrder, callback)
 *
 *		- setContentImageOptimize(container)
 * 
 * 		- calculator(isProfessional, isModal)
 *  
 * 		- PageNavigation(container, currPage, totalItemCount, callback, options)
 * 			.setTotalItemCount
 * 			.setCurrPageNumber
 * 			.setUI
 * 
 */

// jQuery alias setting
jQuery.noConflict();

//--	spro namespace setting	--------------------------------------------------------------
var spro = new (function() {
	var _contextRoot = window["contextRoot"] || "";
	var _webAppPath = null;
	var _loadTime = null;
	var __setLoadTime = null;
	
	var serviceHost = {
		"tbizmeka.com"	: {po:"ezportal", gw:"ezgroupware", sf:"ezframework", hp:"www", so:"ezsso", ac:"ezaccount", ka:"ezkaccount", hr:"ezhuman", em:"ezwebmail", mo:"ezmobile", es:"ezservice",kh:"ezkhuman"},
		"bizmeka.com"	: {po:"ezportal", gw:"ezgroupware", sf:"ezframework", hp:"www", so:"ezsso", ac:"ezaccount", ka:"ezkaccount", hr:"ezhuman", em:"ezwebmail", mo:"ezmobile", es:"ezservice",kh:"ezkhuman"}
	};
	
	var naverAnalyticsKeys = {
		"tbizmeka.com"	: {po:"79f96974c424c", gw:"a77ed98dfe134c", so:"eba93e0502fac", ac:"4b1ffcd2395870", hr:"1475e1c85756ca8"/*, hp:"a063dc2fe98f30", sf:"ee8cbe6e4f1bb0"*/},
		"bizmeka.com"	: {po:"240b8bc477d2e0", gw:"eaff3fd021b9c0", so:"523afa2329656c", ac:"dcc9453da5ec30", hr:"f21a3d1a85ed8c"/*, hp:"35cefb2cff66b8", sf:"9cd65da745ba64"*/}
	};
	
	function isOperatingSystem() {
		return location.hostname.indexOf("tbizmeka.com") == -1;
	}
	
	this.getAnalyticsKey = function(host) {
		var domain = this.getMainDomain(),
			keys = isOperatingSystem() ? naverAnalyticsKeys[domain] : naverAnalyticsKeys[domain];
		return keys[host];
	};
	
	this.getContextRoot = function () { return _contextRoot; };
	this.getWebAppPath = function(host) {
		var domain = this.getMainDomain(),
			hosts = isOperatingSystem() ? serviceHost[domain] : serviceHost[""+domain];
		if(host && hosts && hosts[host]) {
			return location.protocol + "//" + hosts[host] + "." + domain;
		} else {
			if(_webAppPath == null) {
				_webAppPath = location.protocol + "//" + location.hostname +
					((!location.port || location.port == "80") ? "" : ":" + location.port) +
					this.getContextRoot();
			}
			return _webAppPath;
		}
		
	};
	this.getMainDomain = function() {
		return location.hostname.replace(/([a-zA-Z0-9-]+.)/, "");
	};
	this.isOtherHost = function(url) {
		if(document.domain != location.host) {
			return true;
		} else {
			var result = false;
			if(url === undefined) url = document.referrer;
			if(url && url.indexOf("//") >= 0) {	// full path
				var imsi = url.substring(url.indexOf("//")+2),
					protocol = url.substring(0, url.indexOf("//")),
					host = imsi.indexOf("/") >= 0 ? imsi.substring(0, imsi.indexOf("/")) : imsi;
				
				if(protocol != location.protocol || host != location.host)
					result = true;
			}
			return result;
		}
	};
	
	this.setLoadTime = function(millisecond) {
		if(top == window) {
			_loadTime = spro.toDate(millisecond);
			__setLoadTime = new Date();
		} else { top.spro.setLoadTime(millisecond); }
	};
	
	this.getCurTime = function() {	// server side sync time
		if(top == window) {
			if(_loadTime != null) {
				var now = new Date();
				var passing = now - __setLoadTime;
				
				return new Date(_loadTime.getTime() + passing);
			} else { return new Date(); }
		} else { return top.spro.getCurTime(); }
	};
	
	this.urlAddressBookPopup = this.getWebAppPath("gw") + "/support/popup/organogramPopup.do";
	this.urlEmailPopup = this.getWebAppPath("gw") + "/support/popup/emailChoicePopup.do";
	this.urlProfileSimplePopup = this.getWebAppPath("po") + "/support/tenant/user/getProfileSimplePopup.do";
	this.modalInterfacePool = [];
	this.popupInterfacePool = [];
	this.interfaceParamName = "itfSeq";
	
	this.User = function(id, name, jobTitleName, teamName, email, mobile, group, tenantId, tenantName, vId, companyName) {
		this.type = "user";
		this.id = id; 
		this.name = name; 
		this.jobTitleName = jobTitleName; 
		this.teamName = teamName; 
		this.email = email; 
		this.mobile = mobile; 
		this.group = group;
		this.tenantId = tenantId;
		this.tenantName = tenantName;
		this.vId = vId;
		this.companyName = companyName||"";
	};
	
	this.Group = function(code, name, parent) {
		this.type = "group";
		this.code = code;
		this.name = name;
		this.parent = parent;
	};
	
	this.XSSCheck = function(str, level){
		if(typeof(str) == 'string'){
			if (level == undefined || level == 0) {
		        str = str.replace(/\<|\>|\"|\'|\%|\;|\(|\)|\&|\+|\-/g,"");
		    } else if (level != undefined && level == 1) {
		        str = str.replace(/\</g, "&lt;");
		        str = str.replace(/\>/g, "&gt;");
		    }
		}
		return str;		
	};
	
})();

(function($){
	var fileDownloadCheckTimer = null;
	
	// spro common config & method define
	$.extend(spro, {
		// solution configration ------------------------------------------
		config : {
			dateFormat : "yyyy.mm.dd",	// datepicker
			format : {date:"YYYY.MM.DD", dateTime:"YYYY.MM.DD HH:mm"},	// moment
			baseTimezoneMinute : -540,
			schedule : {
				isShowEventBorder : false,	//월간, 팀주간, 팀일간만 적용
				baseTime : 60
			},
			uploader: {
				maxFileSize : 10*1024*1024,
				maxTotalFileSize: 10*1024*1024,
				uploadUrl : "/support/fileupload/uploadFileForFlash.do",
				downloadUrl : "/support/fileupload/downloadFile.do",
				imageSize : {width :1000, height : 100000, quality : 90/*, crop: true*/}
			},
			jstree : {isUserPriority : true},
			tagOptions : {
				defaultText : sproLang.tagging.addTag,
	            minChars : 2,
	            width : "100%",
	            height : "auto",
	            removeWithBackspace : false
			},
			magnificPopupOptions : {
				type: "image",
				delegate: "a.gallery-link",
	            gallery: {
	                enabled: true,
	                navigateByImgClick: true,
	                arrowMarkup: '<button type="button" class="mfp-arrow mfp-arrow-%dir%" title="%title%"></button>',
	                tPrev: sproLang.gallery.prev,
	                tNext: sproLang.gallery.next,
	                tCounter: '<span class="mfp-counter">%curr% of %total%</span>'
	            },
	            image: {
	            	titleSrc: 'title',
	            	tError : sproLang.gallery.loadError
	            }
			},
			responseBaseWidth : 1200
		},
		template : {
			userOption : $.template(null, '<option value="${id}">${userName} ${jobTitleName} ${teamName}</option>')
		},
		// common method --------------------------------------------------
		escapeHTML : function(str) {
			var unescapeHTML = str || "";
			return unescapeHTML.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;').replace(/&quot;/g,'"').replace(/&apos;/g,'\'');
		},
		unescapeHTML : function(str) {
			var escapedHTML = str || "";
			return escapedHTML.replace(/&lt;/g,'<').replace(/&gt;/g,'>').replace(/&amp;/g,'&').replace(/&quot;/g,'"').replace(/&apos;/g,'\'').replace(/&#39;/g,"'");
			
			
		},
		toDate : function(longSec) {
			var clientTime = new Date(0);	// 써머타임이 적용되지 않은 시간대의 표준 시간
			var timezoneOffset = this.config.baseTimezoneMinute - clientTime.getTimezoneOffset();

			longSec -= timezoneOffset != 0 ? (timezoneOffset * 60 * 1000) : 0;
			
			var result = new Date(longSec);
			return new Date( result.getTime() - ((clientTime.getTimezoneOffset()-result.getTimezoneOffset())*60*1000) );	//써머타임이 적용된 시간이면 표준시로 적용하기 위해 그만큼 감함.
		},
		toServerDate : function(longSec) {
			var clientTime = new Date(0);
			var timezoneOffset = this.config.baseTimezoneMinute - clientTime.getTimezoneOffset();

			longSec += timezoneOffset != 0 ? (timezoneOffset * 60 * 1000) : 0;
			
			var result =  new Date(longSec);
			return new Date( result.getTime() + ((clientTime.getTimezoneOffset()-result.getTimezoneOffset())*60*1000) );
		},
		arrayToJSTreeData : function(list, topItem, isCreateId, isSimple, isOpened) {
			var isUserPriority = spro.config.jstree.isUserPriority || false;
			var isOpened = isOpened || false;
			var treeItems = [];
			
			this.createTreeItem = function (item, options, isSimple) {
				var attrData = {type:item.type};
				var itemID = "treeItem_" + (item.type == "group" ? item.code : item.parent + "_" +  item.id);

				switch(item.type) {
					case "group" : 
						$.extend(attrData, {code:item.code, parent:item.parent, groupTypeId:item.groupTypeId, hasChild:item.hasChild, searchSubFlag:item.searchSubFlag}); 
						break;
					case "user" :
					case "joinUser" :
						if(isSimple) {
							$.extend(attrData, {userName:item.userName, id:item.id, group:item.parent, tenantId:item.tenantId, tenantName:item.tenantName, jobTitleName:item.jobTitleName, searchSubFlag:item.searchSubFlag, vId:(item.vId||undefined), profileImg:item.profileImg||""}); 
						}
						else {
							$.extend(attrData, {userName:item.userName, id:item.id, group:item.parent, tenantId:item.tenantId, tenantName:item.tenantName, companyName:item.companyName, controlType:item.controlType, empNo:item.empNo, email:item.email, jobTitleName:item.jobTitleName, teamName:item.teamName, mobile:item.mobile, searchSubFlag:item.searchSubFlag, jobTitleCode: item.jobTitleCode, vId:(item.vId||undefined), profileImg:item.profileImg||"", fax:(item.fax||undefined)}); 
						}
						$.extend(attrData, {zipcode:item.companyPostno||"", address:item.companyAddress||""});	// 택배 주소록으로 추가
						break;
					case "addruser" : 
						if(isSimple) {
							$.extend(attrData, {userName:item.userName, id:item.id, group:item.parent, jobTitleName:item.jobTitleName, searchSubFlag:item.searchSubFlag, profileImg:item.profileImg||""});
						}
						else {
							$.extend(attrData, {userName:item.userName, id:item.id, group:item.parent, empNo:item.empNo, email:item.email, jobTitleName:item.jobTitleName, teamName:item.teamName, mobile:item.mobile, searchSubFlag:item.searchSubFlag, profileImg:item.profileImg||""});
						}
						$.extend(attrData, {zipcode:item.companyPostno||"", address:item.companyAddress||""});	// 택배 주소록으로 추가
						break;
					default : 
						attrData = $.extend({}, item);
						break;
				}

				var result = {
				    text : item.name,
				    icon : item["icon"] || "",
				    data : attrData
				};
				
				if(isCreateId == true){
				     result.id = itemID;
				}
				
				if(((item.type != "user" && item.type != "joinUser") && ""+item.hasChild== "0") || isOpened) {
					//result.state = {'opened' : false};
					result.state =  {'opened' : true};//그룹인경우 하위그룹이 없으면 +아이콘없이 생성
				}
	
				result.li_attr =  {
					code:item.code
				};
				
				if(!result.icon) {
					switch(item.type) {
						case "group" : result.icon = "dept"; break;
						case "user" : result.icon = "fa fa-leaf non-join";break;
						case "joinUser" : 
							if(item.isMyTenant) {
								result.icon = "fa fa-leaf join";
							}else{
								if(item.controlType != undefined && item.controlType.length > 0){
									if(item.controlType.indexOf("VCD") != -1){
										result.text = item.name+"("+item.companyName+")";
									}
								}
								result.icon = "fa fa-leaf other";
							}
							break;
						case "addruser" : result.icon = "fa fa-leaf non-join"; break;
						//case "teamopenoff" : result.icon = "teamopenoff"; break;
						//case "teamopenon" : result.icon = "teamopenon"; break;
					}
				}
				return $.extend(result, options);	// state:open/closed, , icon:css class name
			};
			this.setData = function(item, list) {
				var childOffset = 0;	// remove child count
				for(var i=0;i<list.length;i++) {
					if(list[i] != null && item.li_attr.code === list[i].parent) {
						childOffset++;
						var childItem = this.createTreeItem(list[i], null, isSimple);
						
						for(var j=i;j<list.length-1;j++) { list[j] = list[j+1]; }
						list.length--;
						i--;
						
						i -= this.setData(childItem, list);
						
						if(item.children == undefined) item["children"] = [];
						
						if(isUserPriority) this.push(item.children, childItem);
						else item.children.push(childItem);
					}
				}
				
				if(item.data && item.data.hasChild && !item.children){
				    item.children = true;
				}
				
				return childOffset;
			};
			this.push = function(children, item) {
				var len = children.length;
				if(len == 0 || (item["icon"] != "fa fa-leaf join" && item["icon"] != "fa fa-leaf non-join" && item["icon"] != "fa fa-leaf other")) {	// 사원이 아니면 최 하위로 추가
					children.push(item);
				} else {	// 사원이면....
					//children.push(null);
					for(var i=len; i>=0; i--) {
						//spro.debug("i = " + i);
						if(i == 0) children[i] = item;	// 전체 목록에 사원이 없으면 최상위에 해당 사원을 추가
						else {
							if(children[i-1]["icon"] == "fa fa-leaf join" || children[i-1]["icon"] == "fa fa-leaf non-join" || children[i-1]["icon"] == "fa fa-leaf other") {	// 이전 아이템이 사원이면 해당 사원 밑에 추가
								children[i] = item;
								break;
							} else {	// 사원이 위로 올라 가기 위해 해당 조직을 아래로 하나씩 아래로 내림
								children[i] = children[i-1];
							}
						}
					}
				}
			};
			
			if(topItem) {
				var treeItem = this.createTreeItem(topItem, null, isSimple);//, {state:"open"}
				this.setData(treeItem, list);
				treeItems.push(treeItem);
			} else {

				while(list.length > 0) {
					var item = list.shift();
					var treeItem = this.createTreeItem(item, null, isSimple);//, {state:"open"}
					this.setData(treeItem, list);
					
					if(isUserPriority) this.push(treeItems, treeItem);
					else treeItems.push(treeItem);
				}
			}
			
			return treeItems;
		},
		activeSubmenu : function(menuItem, menuContainer) {
			var $container = $(menuContainer || "#subarea");
			var emAttrName = "data-emItem",
				lsKeyPre = "emi.";	// extend menu item
			
			// 초기 화면 셋팅
			$("ul.menulist > li > a, ul.menulist > li > ul > li > a", $container).each(function() {
				if(!$(this).hasClass("sidebar-nav-menu")) {
					$(this).addClass("sidebar-nav-menu");
				}
				
				var $menuItem = $(this).parent(),
					$submenu = $(this).next("ul");
				
				var menuKey = $menuItem.attr(emAttrName);
				if(menuKey) {
					switch(localStorage.getItem(lsKeyPre + menuKey)) {
						case "0" :
							$(this).removeClass("open");
							$submenu.hide();
							break;
						case "1" :
							$(this).addClass("open");
							$submenu.show();
							break;
						default :
							if($submenu.is(":visible") && !$(this).hasClass("open")) {
								$(this).addClass("open");
							}
					}
				} else {
					if($submenu.is(":visible") && !$(this).hasClass("open")) {
						$(this).addClass("open");
					}
				}
			});
			
			// 메뉴 아이템 클릭
			$("ul.menulist > li > a, ul.menulist > li > ul > li > a", $container).click(function(event) {
				var $anchor = $(this),
					menuKey = $anchor.parent().attr(emAttrName);

				if($anchor.hasClass("open")) {
					$anchor.removeClass("open");
					$anchor.next("ul").slideUp();
					
					if(menuKey) localStorage.setItem(lsKeyPre + menuKey, 0);
				} else {
					var $submenu = $anchor.next("ul");
					if($submenu.is("*")) {
						$anchor.addClass("open");
						$submenu.slideDown(400);
						
						if(menuKey) localStorage.setItem(lsKeyPre + menuKey, 1);
					}
				}
			});
			
			// 초기 화면 active menu 셋팅
			if(menuItem) {
				var $activeMenu = $container.find("li[data-submenu="+menuItem+"]");
				if($activeMenu.is("*")) {
					$activeMenu.addClass("current")
						.parents("li:first", $container).children("a").addClass("current").end()
						.parents("li:first", $container).children("a").addClass("current");
					
					setTimeout(function() {	// 메뉴 영역 세로 스크롤 제어
						var $container = $("div.leftmenu-inner-scroll"),	//$("#leftMenuArea")
							$menuContainer = $activeMenu.parent().hasClass("menulist") ? $activeMenu : $activeMenu.parent().parent();

						if($container.height() < $menuContainer.position().top + $menuContainer.outerHeight()) {
							$container.mCustomScrollbar("scrollTo", Math.ceil($menuContainer.position().top + $menuContainer.outerHeight() - $container.height()));
						}
					}, 400);
				}
			}
		},
		axCover : function(container, isWrap) {
			var $container = container;
			if($.type(container) == "string") {
				switch(container) {
					case "datepicker" :
						$container = $("body").children("div.datepicker");
						break;
					case "timepicker" :
						var $input = $(isWrap);
						$container = $input.siblings("div.bootstrap-timepicker-widget");
						break;
					default : $container = $(container);
				}
			} else {
				$container = container;
			}
			
 			if($.browser.msie) {
				if(!$container.children("iframe.ieCover").is("*")) {
					switch($container.css("position").toLowerCase()) {
						case "absolute" :
						case "relative" : break;
						default : $container.css("position", "relative");
					}
				
					if(isWrap === true) {
						$container.children().wrapAll('<div class="content"/>');
					} else {
						var $content = $container.children();
						switch($content.css("position").toLowerCase()) {
							case "absolute" :
							case "relative" : break;
							default : $content.css("position", "relative");
						}
					}
					var $cover = $('<iframe frameborder="0" class="ieCover" src="about:blank"/>').prependTo($container);
				}
			}
		},
		showModal : function(url, argument, callback, isHold) {
			if(window != top) {
				return top.spro.showModal(url, argument, callback);
			}
			
			var _argument, _callback = callback || undefined;
			if(argument) {
				if($.isFunction(argument)) _callback = argument;
				else _argument = argument;
			}
			
			var $modal;
			$.ajax({
				url : url,
				type : "get",
				async : false,
				success : function(view) {
					var $otherModal = $("body").children("div.modal-backdrop");
					
					var $el = $(view).appendTo(document.body);
					
					$modal = $el.filter("div").modal({backdrop:"static"});
					setTimeout(function() {
						$modal.trigger("open.modal", {
							argument : _argument||undefined,
							callback : function(result) {
								_callback && _callback(result);
								$modal.modal("hide");
							}
						});
						
						if(isHold !== true) {
							$modal.on("hidden.bs.modal", function() {
								$el.find("iframe").remove();	// IE exception effect
								$el.remove();
							});
						}
						
						if($otherModal.is("*")) {// 이미 만들어진 모달이 있는 경우...
							var $lastModal = $otherModal.last().prev();
							var zIndex = Number($lastModal.css("z-index"));
							$modal.css("z-index", zIndex+1)
								.next("div.modal-backdrop").css("z-index", zIndex);
						}
						
						if($("object").is(":visible")) {// modal이 object(activeX에 가려질때...
							spro.axCover($("div.modal-content", $modal), true);
						}
					}, 0);
				},
				error : function(xhr) {
					if(typeof xhr.responseJSON.errMsg != undefined){
						alert(xhr.responseJSON.errMsg);
					}
				}
			});
			
			return $modal;
		},
		showModalFrame : function(url, argument, callback, options) {
			if(window != top) {
				return top.spro.showModalFrame(url, argument, callback, options);
			}
			
			var _argument, _callback = callback || undefined;
			if(argument) {
				if($.isFunction(argument)) {
					options = callback;
					_callback = argument;
				}
				else _argument = argument;
			}
			
			var iFrameName;
			
			if($.type(options) == "string") options = {title:options};
			else {
				if(options && options.frameName) {	// modal로 생성되는 iframe의 이름 지정
					iFrameName = options.frameName;
					options.frameName = undefined;
				}
			}
			
			var _options = $.extend({
				title:"KT bizmeka EZ",
				width:500,
				height:400,
				icon:"",
				expandButton:false,
				closeButton:true,
				titleBarShow:true}, options||{});
			
			// 다른 도메인의 페이지 요청하면 call 이후 되돌리기 위해
			var orgDomain = this.isOtherHost(url) ? document.domain : undefined;
			if(orgDomain) {
				document.domain = this.getMainDomain();
				url += (url.indexOf("?") >= 0 ? "&" : "?") + "otherHost=y";
			}
			
			var paddingClass = (_options.noPadding ? '' : 'pd');
			
			var template = $.template(null, '<div class="modal fade dialog" tabindex="-1" role="dialog" aria-hidden="true" style="opacity:1">' +
					'<div class="modal-dialog" style="width:${width}px;">' +
						'<div class="modal-content">' +
							(_options.titleBarShow ? 
								'<div class="modal-header">' +
									'<h2 class="modal-title">{{html icon}}${title}</h2>' +
									(_options.expandButton ? '<div class="modal-expand"><a href="javascript:void(0)"><i class="icon pop-expand"></i><span><spro:message key="ui.groupware.approval.common.button.view" /></span></a></div>' : '') + 
									'<div class="modal-close">' + 
									(_options.closeButton ? '<a href="javascript:void(0)" data-dismiss="modal"><i class="icon pop-close"></i><span>Close</span></a>' : '') + 
									'</div>'+
								 '</div>' 
								 : '') +
							'<div class="${paddingClass}"' + (_options.noPadding ? ' style="height:${height}px;"' : '' ) + '><iframe' + (iFrameName ? ' name=' + iFrameName : '') + ' src="${url}" border="0" frameborder="0" class="dialog" style="height:${height}px;"></iframe></div>' +
						'</div>' +
					'</div>' +
				'</div>');
			
			var interfaceSequence = this.modalInterfacePool.length;
			var $otherModal = $("body").children("div.modal-backdrop");
			
			if(_options.icon) _options.icon = '<i class="icon ' + _options.icon + '"></i>';
			var $modal = $.tmpl(template, $.extend({url:url, paddingClass: paddingClass}, _options)).appendTo(document.body)
				.attr("data-"+this.interfaceParamName, interfaceSequence);
			
			$modal.modal({backdrop:"static", keyboard:_options.closeButton})
				.on("hidden.bs.modal", function() {
					$modal.find("iframe").remove();	// IE exception effect
					$modal.remove();
					spro.modalInterfacePool[interfaceSequence] = undefined;
					
					$(window).off("resize", resetModalTopMargin);
				});
			
			function resetModalTopMargin() {
				var $modalContent = $modal.children("div.modal-dialog"),
					otherHeight = $(window).height() - $modalContent.outerHeight(),
					topMargin = (otherHeight < 2) ? 0 : Math.floor(otherHeight / 2);
				$modalContent.css("margin", topMargin+"px auto 0");
			}
			
			$(window).on("resize", resetModalTopMargin)
				.trigger("resize");

			if($("object").is(":visible")) {
				spro.axCover($("div.modal-content", $modal), true);
			}

			this.modalInterfacePool.push({
				$modal : $modal,
				iframeHeight : _options.height,
				argument : _argument||undefined,
				callback : function(result) {
					try {
						if(orgDomain) document.domain = orgDomain;
					} catch(e) {}
					
    				_callback && _callback(result);
    				$modal.modal("hide");
    			}
			});
			
			if($otherModal.is("*")) {// 이미 만들어진 모달이 있는 경우...
				var $lastModal = $otherModal.last().prev();
				var zIndex = Number($lastModal.css("z-index"));
				$modal.css("z-index", zIndex+1)
					.next("div.modal-backdrop").css("z-index", zIndex);
			}
			
			return $modal;
		},
		getModalArgument : function() {
			if((this.getUrlArguments("otherHost") === "y" && parent != window)
					|| (document.referrer && spro.isOtherHost(document.referrer)))
				document.domain = this.getMainDomain();
			
			var $iframe;
			$("iframe.dialog", parent.document.body).each(function() {
				if($(this).contents().get(0) == window.document) {
					$iframe = $(this);
					return false;
				}
			});

			if(!$iframe){//비정상적인 함수 호출은 null로 리턴한다.
				return null;
			}else{
				var itfSeq = $iframe.parents("div.modal:first").attr("data-"+this.interfaceParamName);
				return parent.spro.modalInterfacePool[itfSeq];
			}
			
		},
		popupOpen : function(url, options, windowName) {
			options = jQuery.extend({width:200, height:200, top:undefined, left:undefined, resizable:true, scrollbar:true, argument:undefined, callback:null}, options);
			options.resizable = options.resizable === true ? "yes" : "no";
			options.scrollbar = options.scrollbar === true ? "yes" : "no";
			options.modal = options.modal === true ? "yes" : "no";
			options.fullscreen = options.fullscreen === true ? "yes" : "no";
			
			var features = "channelmode=no, directories=no, location=no, menubar=no, scrollbars=yes, status=no, titlebar=no, toolbar=no";
			
			if(options.fullscreen == "no"){
				features += ", width=" + (options.width||200) + ", height=" + (options.height||200);
			}
			
			features += ", fullscreen=" + options.fullscreen;			
			features += ", left=" + (!isNaN(options.left) ? options.left : ((Math.floor((screen.availWidth - options.width) / 2) + (jQuery.browser["msie"] ? 0 : screen.availLeft))));// IE의 경우 사이즈 계산을 못하나 NaN으로 입력시 무시하고 센터로 보내짐.
			features += ", top=" + (!isNaN(options.top) ? options.top : ((Math.floor((screen.availHeight - options.height) / 2) + (jQuery.browser["msie"] ? 0 : screen.availTop))));
			features += ", resizable=" + options.resizable;
			features += ", scrollbars=" + options.scrollbar;
			
			windowName = (windowName && windowName.replace(/\s/g, "")) || "_blank";	// 공백 제거
			
			if(options.argument || options.callback) {
				url += (url.indexOf("?") == -1 ? "?" : "&") + this.interfaceParamName + "=" + this.popupInterfacePool.length;
				var itf = { argument:(jQuery.browser["msie"] ? JSON.stringify(options.argument) : options.argument) || null, callback : null };
				if(options.callback) {
					itf.callback = function(result) {
						if(jQuery.browser["msie"] && typeof(result) == "string") {
							try {
								result = jQuery.parseJSON(result);
							} catch(e) { }
						}
						options.callback(result);
					};
				}
				this.popupInterfacePool.push(itf);
				
				// opner와 interface가 필요할 때만 셋팅함
				var orgDomain = this.isOtherHost(url) ? document.domain : undefined;
				if(orgDomain) {
					document.domain = this.getMainDomain();
					url += (url.indexOf("?") >= 0 ? "&" : "?") + "otherHost=y";
				}
			}
			
			url += (url.indexOf("?") == -1 ? "?" : "&") + "popup=y";
			var popup;
			try {
				popup = window.open(url, windowName, features);
			} catch(e) {
				document.domain = this.getMainDomain();
				popup = window.open(url, windowName, features);
			}

			return popup;
		},
		popupArgument : function(postMessageCallback) {
			var result = null;
			if(parent && parent.dialogArguments) {	// dialog window
				if(parent && parent["argument"]) {
					result = parent["argument"];
				}
			} else {	// popup window
				if((this.getUrlArguments("otherHost") === "y" && opener)
						|| (document.referrer && spro.isOtherHost(document.referrer)))
					document.domain = this.getMainDomain();

				var openerWindow = opener || top.opener; 
				
				var poolIdx = this.getUrlArguments(this.interfaceParamName);
				if(poolIdx != undefined && poolIdx > -1 && openerWindow) {
					try {
						var itf = openerWindow.spro.popupInterfacePool[poolIdx];
						if(jQuery.browser["msie"] && typeof(itf.argument) == "string") { // IE에서는 stringify해서 주기로 하였으나 타 서비스에서 IE11을 IE로 인식하지 못하므로 실제 string인지 체크
							try {	// 오브젝트를 문자로 변환한 것이 아니라 실제 단순 문자로 넘겼을 수 있으므로 예외처리함
								result = jQuery.parseJSON(itf.argument);
							} catch(e) {
								result = itf.argument;
							}
						} else {
							result = itf.argument;
						}
					} catch(e) { // CORS error
//						console.log("### CORS Error ###");
						
						window.addEventListener("message", function(event) {
							isPostMessage = true;
							postMessageCallback && postMessageCallback(event.data);
						});
						
						opener.postMessage("popupInitial", "*");
					}
				}
			}
			
			postMessageCallback && postMessageCallback(result);
			
			return result;
		},
		popupReturn : function (result, poolIdx) {
			if(parent && parent.dialogArguments) {	// dialog window
				var callback = parent.dialogArguments["callback"];
				if(parent.opener[callback]) {
					parent.opener[callback](result);
					parent.opener[callback] = undefined;
				} else {
					parent.window.returnValue = result;
				}
				parent.close();
			} else {	// popup window
				var openerWindow = opener || top.opener;
				
				var poolIndex = (poolIdx === '0' || poolIdx === 0) ? 0 : (poolIdx || this.getUrlArguments(this.interfaceParamName));	// poolIdx가 있으면 url에서 조회하지 않음
				if(poolIndex != undefined && poolIndex > -1 && openerWindow) {
					try {
						if(jQuery.browser["msie"]) result = JSON.stringify(result);	// 팝업에서 데이타 전달시 Object타입의 데이타를 전달하면 데이타 변형이 일어남. IE only
						
						if((this.getUrlArguments("otherHost") === "y" && opener)
								|| (document.referrer && spro.isOtherHost(document.referrer)))
							document.domain = this.getMainDomain();
						
						var itf = openerWindow.spro.popupInterfacePool[poolIndex];
						itf.callback && itf.callback(result);
					} catch(e) { // CORS error
						opener.postMessage(result, "*");
					}
				}
				
				window.close() || top.window.close();
			}
		},
		showEmailModal : function(callback, mailItem, options) {
			var _options = $.extend(true, {
				searchWord : "",
				controlType : "ORG",
				modal : false,
				activeTab : "org",	// org - 조직도, addr - 주소록, cust - 거래처
				tabs : {org:1, addr:1, cust:1},	// 메인탭 활성화(생성) 여부 : 조직도, 주소록, 거래처
				subTabs : {org:0, addr:1, cust:1}	// 서브탭의 개인주소록 표시 여부 : 조직도, 주소록, 거래처
			}, options);

			var url = this.urlEmailPopup + "?" + //controlType=" + _options.controlType.toUpperCase() +
				"activeTab=" + _options.activeTab.toUpperCase() + 
				"&controlTabType=" + _options.tabs.org + ":" + _options.tabs.addr + ":" + _options.tabs.cust + ":" + _options.tabs.ivt +
				"&controlSubTabType=" + _options.subTabs.org + ":" + _options.subTabs.addr + ":" + _options.subTabs.cust;
			//topTabType (0: 조직도, 1: 주소록, 2:거래처)에 따라 팝업창 상단의 최초로딩되는 탭이 결정된다. 아래와 같이 호출함.
			//$("#employee").selectUser({delimiter:"|",addressOption:{topTabType:"1"}, data:[]});	
			//ikep.selectUser.js에서 초기화되면서 options에 추가되고 최종적으로 organogramPopup.do에 호출됨.
			//그러면 organogramPopup.jsp에서 $("#divOrgMainTab>ul a").eq(<c:out value="${topTabType}"/>).click(); 로 처리된다.
			
			var popupOptions = {
				argument : { searchWord:_options.searchWord, items:mailItem||undefined },
				callback : callback
			};

			this.showModalFrame(url, popupOptions.argument, popupOptions.callback, {
				title : sproLang.common.modalTitle.emailSelect,
    			icon : "modal-title-user",
    			width : 850,
				height : 490
    		});
		},
		openEmailPopup : function(callback, mailItem, options) {
			var _options = $.extend(true, {
				searchWord : "",
				controlType : "ORG",
				activeTab : "org",	// org - 조직도, addr - 주소록, cust - 거래처
				tabs : {org:1, addr:1, cust:1},	// 메인탭 활성화(생성) 여부 : 조직도, 주소록, 거래처
				subTabs : {org:0, addr:1, cust:1}	// 서브탭의 개인주소록 표시 여부 : 조직도, 주소록, 거래처
			}, options);

			var url = this.urlEmailPopup + "?" + //controlType=" + _options.controlType.toUpperCase() +
				"activeTab=" + _options.activeTab.toUpperCase() + 
				"&controlTabType=" + _options.tabs.org + ":" + _options.tabs.addr + ":" + _options.tabs.cust + ":" + _options.tabs.ivt +
				"&controlSubTabType=" + _options.subTabs.org + ":" + _options.subTabs.addr + ":" + _options.subTabs.cust;
			//topTabType (0: 조직도, 1: 주소록, 2:거래처)에 따라 팝업창 상단의 최초로딩되는 탭이 결정된다. 아래와 같이 호출함.
			//$("#employee").selectUser({delimiter:"|",addressOption:{topTabType:"1"}, data:[]});	
			//ikep.selectUser.js에서 초기화되면서 options에 추가되고 최종적으로 organogramPopup.do에 호출됨.
			//그러면 organogramPopup.jsp에서 $("#divOrgMainTab>ul a").eq(<c:out value="${topTabType}"/>).click(); 로 처리된다.
			
			this.popupOpen(url, {
				width:850,
				height:560,
				resizable : false,
				argument : mailItem,
				callback : function(result) {
					callback && callback(result);
				}
			});
		},
		showUserContextMenu : function(target, userId, direction) {
	        spro.goProfilePopupMain(userId);
	    },
		goProfilePopupMain : function(targetUserId) {
			var url = this.urlProfileSimplePopup + "?targetUserId=" + targetUserId;
			if(this.getWebAppPath() == this.getWebAppPath("po") || this.getWebAppPath() == this.getWebAppPath("gw")) {
		    	this.showModal(url, null, null, {title:"사용자 정보", width:445, height:187});
			} else {
			    this.popupOpen(url, {
			    	width : 480,
					height : 230,
					resizable : false,
					modal : true
				}, "winUserInfo");
			}
        },
	    splitView : function(container, leftMenuContainer) {
	    	function getContainerHeight(el) {
				var $el = $(el);
				var height = $(window).innerHeight() - $el.offset().top - 1;//position
				return height;
				while($el.get(0).tagName.toLowerCase() != "body") {
					if($el.css("position") != "absolute") {
						$el.nextAll(":visible").each(function() {
							var $e = $(this);
							if($e.css("position") != "absolute") {
								var tagName = $e.get(0).tagName;
								switch(tagName.toLowerCase()) {
									case "script":
									case "style":
									case "link":
										break;
									default : height -= $e.outerHeight();
								}
							}
						});
					}
					$el = $el.parent();
				}
				return height-1;
			}
			
			if(!$.curCSS) $.curCSS = $.css;
			
			var $container = $(container);
			$container.children()
				.eq(0).addClass("ui-layout-west")
				.end().eq(1).addClass("ui-layout-center");

			$container.height(getContainerHeight($container))
				.layout({
					togglerLength_open:50,
					west__size: .50,
					west__minSize: 300,
					west__maxSize: 900,
					west__slidable:	false,
		 			togglerTip_open:	"open",
		 			togglerTip_closed:	"close",
		 			resizerTip:			"resizer"
				});
			
			$("#page-container").addClass("closed");
			
			var $menuContainer = leftMenuContainer && $(leftMenuContainer);
			if($menuContainer && $menuContainer.is("*")) {
				$menuContainer.height(getContainerHeight($menuContainer));
			}
			
			var layoutResize = function() {
				$container.height(getContainerHeight($container));
				if($menuContainer && $menuContainer.is("*"))
					$menuContainer.height(getContainerHeight($menuContainer));
			};
			
			$(window).resize(layoutResize);
			$container.data("resizeEvent", layoutResize);
	    },
	    destroySplitView : function(container, leftMenuContainer) {
	    	var $container = $(container);
	    	$container.layout().destroy();
	    	$container.children().eq(0).removeClass("ui-layout-west")
	    		.end().eq(1).removeClass("ui-layout-center");
	    	
	    	$("#page-container").removeClass("closed");
	    	
	    	var $menuContainer = leftMenuContainer && $(leftMenuContainer);
			if($menuContainer && $menuContainer.is("*")) {
				$menuContainer.css("height", "");
			}
			
			var event = $container.data("resizeEvent");
			if(event) $(window).unbind("resize", event);
			
			var $left = $container.children().eq(0);
			$left.children().eq(0).css("overflow-y", "")
				.css("height", "");
	    },
	    referrerPopup : function(type,module,itemId,boardId) {
	    	var url = spro.getContextRoot()+"/support/popup/popupReferrerList.do?type="+type+"&module="+module+"&itemId="+itemId+"&boardId="+boardId; 
	    	
	    	this.showModal(url);
	    },
        getUrlArguments : function(name) {
        	var result = undefined, paramSplit, url = location.href;
        
        	if((paramSplit = url.indexOf("?")) > -1) {
        		var bookmarkPosition = url.indexOf("#");
        		var paramString = url.substring(paramSplit+1, bookmarkPosition > -1 ? bookmarkPosition : url.length);
        		var params = paramString.split("&");
        
        		result = name ? undefined : {};
        		for(var i=0;i<params.length;i++) {
        			var param = params[i].split("=");
        			if(name) {
        				if(name == param[0]) {
        					result = isNaN(param[1]) ? param[1] : parseInt(param[1], 10);
        					break;
        				}
        			} else {
        				result[param[0]] = isNaN(param[1]) ? param[1] : parseInt(param[1], 10);
        			}
        		}
        	}
        	
        	return result;
        },
        ajaxFileDownloadStart : function(name) {
        	$.removeCookie("FDT");
        	if( $("#blockContainer")[0] ) {
        		$("#blockContainer").loading();
        	} else {
        		$("body").loading();
        	}
        	fileDownloadCheckTimer = window.setInterval(function() {
        		var cookieValue = $.cookie('FDT');
        		if ("1" == cookieValue) {
        			window.clearInterval(fileDownloadCheckTimer);
                	$.removeCookie("FDT");
                	if( $("#blockContainer")[0] ) {
                		$("#blockContainer").loaded();
                	} else {
                		$("body").loaded();
                	}
        		}
        	}, 500);
        },
        ajaxFileDownloadComplete : function(name) {
        	window.clearInterval(fileDownloadCheckTimer);
        	$.removeCookie("FDT");
        	if( $("#blockContainer")[0] ) {
        		$("#blockContainer").loaded();
        	} else {
        		$("body").loaded();
        	}
        },
        sendMailPop : function(nameList, emailList, title, content, fileIdList, fileNameList) {
        	spro.showModalFrame(spro.getContextRoot() + "/support/mail/sendMailForm.do", {
    			nameList : nameList,
    			emailList : emailList,
    			title : title,
    			content : content,
    			fileIdList : fileIdList,
    			fileNameList : fileNameList
    		},
    		null,	// callback
    		{
    			title : "MailSend",
    			width:600,
        		height:500
    		});
        },
        fileUpload : function(callback, options) {
        	/**
        	 * options
        	 * 		maxFileSize
        	 * 		maxImageWidth
        	 * 		isImageOnly : default - true
        	 */
        	var _options = options || {};
        	_options.isImageOnly = _options.isImageOnly === false ? false : true;
        	var modalTitle = _options.title || (_options.isImageOnly ? sproLang.fileupload.image : sproLang.fileupload.file);
        	
        	_options.title = undefined;
        	spro.showModalFrame(spro.getContextRoot() + "/support/fileupload/uploadForm.do", _options, callback, {
    			title : modalTitle,
    			icon : "modal-title-file",
    			width:600,
        		height:80
    		});
        },
        dropdownCover : function(container) {
        	var $container = $(container);
        	$container.prepend('<iframe src="about:blank" frameborder="0" class="axCover"/>');
        },
        sort : function (container, sortColumn, sortOrder, callback) {
			$("[data-sortColumn]", $(container)).each(function(){
				var $column = $(this),
					column = $column.attr("data-sortColumn");
				
				$column.append('<i class="fa"><span class="blind"></span></i>');
				
				if(sortColumn && sortColumn == column) {
					switch(sortOrder) {
						case "ASC":
							$("i", $column).addClass("fa-caret-up active");
							$("span.blind", $column).text(sproLang.sort.asc);
							break;
						case "DESC":
							$("i", $column).addClass("fa-caret-down active");
							$("span.blind", $column).text(sproLang.sort.desc);
							break;
					}
				} else {
					$("i", $column).addClass("fa-caret-up");
					$("span.blind", $column).text(sproLang.sort.asc);
				}
				
				$column.click(function(event) {
					event.preventDefault();
					
					var column = $column.attr("data-sortColumn"),
						order = "ASC";
					if(!$("i", $column).hasClass("active")) {
						order = "ASC";
					} else {
						switch(true) {
							case $("i", $column).hasClass("fa-caret-down") : order = "ASC"; break;
							case $("i", $column).hasClass("fa-caret-up") : order = "DESC"; break;
						}
					}
					
					callback(column, order, $column);
				});
			});
		},
		setContentImageOptimize : function (container) {
			var $container = $(container);

			function showContentImage(event) {
				var orgWidth = $(this).data("orgWidth");
				if(orgWidth != $(this).width()) {
					var orgHeight = Math.round($(this).height() * orgWidth / $(this).width()),
						windowWidth = orgWidth,
						windowHeight = orgHeight;
					
					if(windowWidth > screen.availWidth) windowWidth = screen.availWidth;
					if(orgHeight > screen.availHeight) windowHeight = screen.availHeight;

					var imgWindow = window.open("about:blank", "_blank", "width=" + windowWidth + ", height=" + windowHeight + ", resizable=yes, scrollbars=yes");
 					
					imgWindow.document.write('<img src="' + $(this).attr("src") + '" onclick="window.close()" style="cursor:pointer" />');
 					imgWindow.document.body.style.margin = 0;
				}
			};
			
			var contentWidth = $container.width();

			$container.find("img").each(function(idx, img) {
				var $img = $(img).click(showContentImage);
				var orgWidth = $img.width();

				if(!orgWidth
						|| ($.browser.msie && orgWidth == 28)	// x-box image
						|| (!$.browser.msie && orgWidth == 24)) {	// x-box image
					$img.load(function() {
						var $img = $(this);
						var orgWidth = $img.width();

						$img.data("orgWidth", orgWidth);
						if(orgWidth > contentWidth) {
							$img.css({width:contentWidth+"px", height:"auto", cursor:"pointer"});
						}
					});
				} else {
					$img.data("orgWidth", orgWidth);
					if(orgWidth > contentWidth) {
						$img.css({width:contentWidth+"px", height:"auto", cursor:"pointer"});
					}
				}
			});
			
			$(window).resize(function() {
				var contentWidth = $container.width();
				$container.find("img").each(function(idx, img) {
					var $img = $(img);
					var orgWidth = $img.data("orgWidth");
					var curWidth = $img.width();
					if(curWidth <= orgWidth && contentWidth < orgWidth) {
						$img.css("width", contentWidth+"px")
							.css("cursor", "pointer");
					}
					
					if(curWidth != orgWidth && contentWidth >= orgWidth) {
						$img.css("width", orgWidth+"px")
							.css("cursor", "auto");
					}
				});
			});
		},
		util : {
			calculator : function(isProfessional, isModal) {
				var url = spro.getWebAppPath("po") + "/support/calculator/main.do" +
							(isProfessional ? "?professional=y" : "");
				
				if(isModal) {
					spro.showModalFrame(url, null, null, {
						title : sproLang.calculator.title,
						width : isProfessional ? 502 : 326,
						height : isProfessional ? 315 : 277
					});
				} else {
					spro.popupOpen(url, {
						width : isProfessional ? 480 : 304,
						height : isProfessional ? 355 : 317
					});
				}
			}
		},
		quickMsgPopup : function(targetId, isPopup){
			var url = "";
			switch(true) {
				case spro.getWebAppPath().indexOf("ezportal") >= 0 :
					url = "/portal/main/webMessengerServiceRest.do";
					break;
				case spro.getWebAppPath().indexOf("ezgroupware") >= 0 :
					url = "/support/profile/webMessengerServiceRest.do";
					break;
				default :
					window.open(spro.getWebAppPath("po") + "/portal/main/popupWebMessenger.do", '_blank', 'menubar=no,status=no,scrollbars=no,resizable=yes,width=962,height=720');
			}
			
			if(url) {
			    $.ajax({
			        url : spro.getContextRoot()+url,
			        data : {},
			        type : "post",
			        success : function(result) {
			            var objMap = result.AuthInfo;
			            var param = "encData=" + objMap.encData + "&p_login_id=" + encodeURIComponent(encodeByAES256(objMap.userId));
				        if (jQuery.trim(targetId)) {
				            param += "&chatId=" + targetId;            
				        }
				        param += "&dummy=dummy";
	
				        var messengerURL = "https://ezmessenger." + spro.getMainDomain() + ":9443/WebMessenger_KTS_new/index.html";
				        
				        if(isPopup) {
				        	location.href = messengerURL + '?' + param;
				        } else {
				        	window.open(messengerURL + '?' + param, '', 'menubar=no,status=no,scrollbars=no,resizable=yes,width=962,height=720');
				        }
			        },
			        error : function() {}
			    });
			}
		},
		isAgreedRemote : function(productId, url) {
			switch(productId) {
				case "PRO_000482_WEB" :	// 웹메신저이면
					spro.quickMsgPopup();
					break;
				case "PRO_000482" :	// 메신저
					spro.popupOpen(url, {width:910, height:620, scrollbar:false}, "ezmessenger");
					break;
				case "PRO_000598" :	// 화상회의
					spro.popupOpen(url, {width:700, height:530, scrollbar:false}, "ezgooroomee");
					break;
				default :
					if(productId == "PRO_000486") {	// 기프티쇼
						$.ajax({
							url : spro.getWebAppPath("po") + "/user/getUserAuthType.do",
							type : "get",
							dataType : "jsonp",
							success : function(authType, mobile) {
								if(authType == "X" && !$.isNumeric(mobile)){				
									
									spro.popupOpen(
											spro.getWebAppPath("po") + "portal/main/unServiceabilityModal.do",
										{width:500,height:150},
					    				"서비스 사용 제한 알림"
						    		);
									return;
								}
							},
							error : function(xhr) {
								console.log(xhr.responseJSON.errMsg);
							}
						});
					}
					
					$.ajax({
						url : spro.getWebAppPath("po") + "/support/product/isAgreedRemote.do?productId=" + productId,
						type : "get",
						dataType : "jsonp",
						success : function(isAgreed) {
							if(isAgreed){
								if(productId == "PRO_000626" || productId == "PRO_000564"){
									window.open(url);
								}else{
									location.href = url;
								}
							} else {
								spro.popupOpen(
										spro.getWebAppPath("po") + "/support/product/agreementPopup.do?productId=" + productId + "&url=" + encodeURIComponent(url),
									{width:800, height:508},
									"productAgreementPopup"
								);
							}
						},
						error : function(xhr) {
							console.log(xhr.responseJSON.errMsg);
						}
					});
			}
		}
	});
	
	{	// pageNavigation
		spro.PageNavigation = function(container, currPage, totalItemCount, callback, options) {
			this.$container = $(container);
			this.currPage = currPage;
			this.totalItemCount = 0;
			this.callback = callback;
			
			this.totalPageCount = 1;
			this.totalPageBlockCount = 1;
			
			if(options && options.pagePerRecord) this.pagePerRecord = options.pagePerRecord;
			if(options && options.blockPerPage) this.blockPerPage = options.blockPerPage;
			
			this.$container.data("pageNavigation", this);
			
			var that = this;
			
			(function() {
				that.setTotalItemCount(totalItemCount);
				
				that.$container.delegate("a", "click", function(event) {
					event.preventDefault();
					if(!$(this).hasClass("disabled")) {
						switch(true) {
							case $(this).is("[href=#first]") :	// first page
								that.first();
								break;
							case $(this).is("[href=#prev]") :		// previous page block
								that.prev();
								break;
							case $(this).is("[href=#next]") :	// next page block
								that.next();
								break;
							case $(this).is("[href=#last]") :	// last page block
								that.last();
								break;
							default :
								var targetPage = Number($(this).text());
								that.go(targetPage);
						}
					}
				});
			})();
			
			return this;
		};
		spro.PageNavigation.prototype.setUI = function() {
			this.$container.empty();
			
			var $ul = $('<ul class="pagination"/>').appendTo(this.$container);
			$ul.append('<li><a href="#first" class="disabled"><i class="fa fa-chevron-left"></i><i class="fa fa-chevron-left"></i></a></li>');
			$ul.append('<li><a href="#prev" class="disabled"><i class="fa fa-chevron-left"></i></a></li>');
			
			var start = (Math.ceil(this.currPage / this.blockPerPage) - 1) * this.blockPerPage + 1;
			var end = start + this.blockPerPage - 1;
			if(end > this.totalPageCount) end = this.totalPageCount;
			for(var i=start;i<=end; i++) {
				var className = [];
				if(i == start) className.push("liFirst");
				if(i == end) className.push("liLast");
				if(i == this.currPage) $ul.append('<li class="active"><a href="#' + i + '">' + i + '</a></li>');
				else $ul.append('<li><a href="#' + i + '">' + i + '</a></li>');
			}
			
			$ul.append('<li><a href="#next" class="disabled"><i class="fa fa-chevron-right"></i></a></li>');
			$ul.append('<li><a href="#last" class="disabled"><i class="fa fa-chevron-right"></i><i class="fa fa-chevron-right"></i></a></li>');

			if(this.currPage > 1) $("a[href=#first]", $ul).removeClass("disabled");
			if(start > this.blockPerPage) $("a[href=#prev]", $ul).removeClass("disabled");
			if(end < this.totalPageCount) $("a[href=#next]", $ul).removeClass("disabled");
			if(this.currPage < this.totalPageCount) $("a[href=#last]", $ul).removeClass("disabled");
		};
		spro.PageNavigation.prototype.pagePerRecord = 20;
		spro.PageNavigation.prototype.blockPerPage = 10;
		spro.PageNavigation.prototype.setTotalItemCount = function(count) {
			if(this.totalItemCount != count) {
				this.totalItemCount = count;
				
				if(this.totalItemCount > 0) {
					this.totalPageCount = Math.ceil(this.totalItemCount / this.pagePerRecord);
					this.totalPageBlockCount = Math.ceil(this.totalPageCount / this.blockPerPage);
				} else {
					this.totalPageCount = 1;
					this.totalPageBlockCount = 1;
				}
				
				this.setUI();
			}
		};
		spro.PageNavigation.prototype.setCurrPageNumber = function(pageNumber) {
			if(this.currPage != pageNumber) {
				this.currPage = pageNumber;
				this.setUI();
			}
		};
		spro.PageNavigation.prototype.first = function() {
			if(this.currPage != 1) this.go(1);
		};
		spro.PageNavigation.prototype.prev = function() {
			var page = (Math.ceil(this.currPage / this.blockPerPage) - 1) * this.blockPerPage;
			if(page > 0) this.go(page);
		};
		spro.PageNavigation.prototype.next = function() {
			var page = Math.ceil(this.currPage / this.blockPerPage) * this.blockPerPage + 1;
			if(page <= this.totalPageCount) this.go(page);
		};
		spro.PageNavigation.prototype.last = function() {
			if(this.currPage != this.totalPageCount) this.go(this.totalPageCount);
		};
		spro.PageNavigation.prototype.go = function(page) {
			this.callback(page);
		};
	}


	// jQuery extend method
	$.fn.loading = function(type) {
		var $target = this;

		if($target[0].tagName.toLowerCase() == "body") {
			var $loading = $('<div/>').appendTo($target)
				.addClass("body-loading")
				.click(function(event) {
					event.preventDefault();
					event.stopPropagation();
				});
		} else {
			var $loading = null;
			switch($target.css("position")) {
				case "relative" :
				case "absolute" :
					$loading = $('<div/>').appendTo($target);
					break;
				default :
					switch($target.parent().css("position")) {
						case "relative" :
						case "absolute" : break;
						default : $target.parent().css("position", "static");//relative
							
					}
					var position = $target.position();
					$loading = $('<div/>').appendTo($target.parent())
						.css({left:position.left, top:position.top});
			}
			$loading.css({width:$target.innerWidth(), height:$target.innerHeight()})
				.addClass(type == "button" ? "button-loading" : "container-loading")
				.click(function(event) {
					event.preventDefault();
					event.stopPropagation();
				});
		}
		
		return $(this);
	};

	$.fn.loaded = function(isComplete) {
		$("div.body-loading, div.container-loading, div.button-loading", this).remove();
		if(!isComplete) this.siblings("div.container-loading, div.button-loading").remove();
		
		return $(this);
	};
	
	// ajax 실행전 실행후 		   
	$(document).ajaxStart(function() {
		if($("body").children("div.body-loading").length == 0){
			$("body").loading();
		}
	});
	
	$(document).ajaxStop(function() {
		if($("body").children("div.body-loading").length >= 1){
			$("body").loaded();
		}
	});
	
	$.postJSON = function (url, jsonData, success, options) {
        var config = {
            url: url,
            type: "POST",
            data: jsonData ? JSON.stringify(jsonData) : null,
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            success: success
        };
        $.ajax($.extend(options, config));
    };
	
	// jQuery ajax initialize
	$(document).ajaxSend(function(event, xhr, ajaxOptions) {
		switch(true) {
			case !!ajaxOptions["loadingElement"]:
				switch(typeof(ajaxOptions.loadingElement)) {
					case "string" : $(ajaxOptions.loadingElement).loading("button");break;
					case "object" :
						for(var type in ajaxOptions.loadingElement) {
							switch(type) {
								case "button":
								case "container":
									$(ajaxOptions.loadingElement[type]).loading(type);
									break;
							}
						}
						break;
				}
			
				break;
		}
	}).ajaxError(function(event, xhr, ajaxOptions, errorType) {
		if(xhr.status == 511) {	//SESSION_TIME_OUT_ERROR_CODE
			document.location.href = spro.getContextRoot() + "/logout.do";
		}
	}).ajaxComplete(function(event, xhr, ajaxOptions) {
		switch(true) {
			case !!ajaxOptions["loadingElement"]:
				var $targets = [];
				switch(typeof(ajaxOptions.loadingElement)) {
					case "string" : $targets.push($(ajaxOptions.loadingElement)); break;
					case "object" :
						for(var type in ajaxOptions.loadingElement) {
							$targets.push($(ajaxOptions.loadingElement[type]));
						}
						break;
				}
				$.each($targets, function() {
					if(this && this.length > 0) {
						switch(this.css("position")) {
							case "relative" :
							case "absolute" : this.loaded(); break;
							default : this.parent().loaded(true);
						}
					}
				});
				break;
		}
	});
	
	//var csrfApplyHost = ["www", "ezsso", "ezportal", "ezgroupware", "ezservice", "ezaccount", "ezhuman", "ezsales", "eztax", "ezframework", "ezwebmail"];
	var csrfExcHost = ["ezbizinfo", "ezwebfax"];
	var host = location.host.substring(0, location.host.indexOf("."));
	if(csrfExcHost.indexOf(host) == -1) {	// csrfApplyHost.indexOf(host) >= 0
		$.ajaxSetup({
			cache:false,
			beforeSend : function(xhr, options) {
				if(this.url != getAjaxTokenPage()){
					if (isCsrfProtectPattern(this.url)) {
						$.ajax({    
							url : getAjaxTokenPage() ,     
							type : "post",  
							async: false,
							success : function(result) {
								xhr.setRequestHeader('OWASP_CSRFTOKEN', result);
							},
							error : function(event, request, settings) {alert("error"); }
						}); 
					}
				}
			}
		});
	}
	
	getCsrfProtectPattern = function(){
		return "create|add|update|modify|delete|remove";
	}

	isCsrfProtectPattern = function(url){
		var patternPublic = "create|add|update|modify|delete|remove";
		if ((new RegExp(patternPublic,"i")).test(url)) {
			return true;
		}else{
			return false;
		}
	}

	getAjaxTokenPage = function(){
		return spro.getContextRoot()+"/support/csrf/getAjaxToken.do";
	}

	// document ready common action
	$(function() {
        $('.table-striped tbody>tr:nth-child(odd)').css('background','#f9f9f9'); 
		$('.table-striped.striped02 > tbody > tr:nth-child(1) > td').css('background','#f9f9f9'); 
		$('.table-striped.striped02 > tbody > tr:nth-child(4n-1) > td').css('background','#fff'); 
	});
	
})(jQuery);

const ENCRYPTIOM_KEY = "kTbizMekaEZMeSsengerkTbizMekaEZM";
const IV = ENCRYPTIOM_KEY.substring(0, 16);

function encodeByAES256(data){
    const cipher = CryptoJS.AES.encrypt(data, CryptoJS.enc.Utf8.parse(ENCRYPTIOM_KEY.padEnd(32, " ")), {
        iv: CryptoJS.enc.Utf8.parse(IV),
        padding: CryptoJS.pad.Pkcs7,
        mode: CryptoJS.mode.CBC
    });
    return cipher.toString();
}

function decodeByAES256(data){
    const cipher = CryptoJS.AES.decrypt(data, CryptoJS.enc.Utf8.parse(ENCRYPTIOM_KEY.padEnd(32, " ")), {
        iv: CryptoJS.enc.Utf8.parse(IV),
        padding: CryptoJS.pad.Pkcs7,
        mode: CryptoJS.mode.CBC
    });
    return cipher.toString(CryptoJS.enc.Utf8);
};
